<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <author>Ржевский Дмитрий</author>
        <title>Свойства (properties)</title>
    </properties>
    <meta name="keyword" content="java, maven 3, свойства, переменные, зкщзукешуы, "/>
    <body>
        <section name="">
            <p>
                Для того чтобы можно было легче писать и настраивать проект в pom.xml можно использовать свойства.
                Можно рассматривать свойства просто как переменные.<br/>
                Есть:
                <ol>
                    <li>Переменные объявленные внутри pom.xml</li>
                    <li>Предопределённые переменные.</li>
                    <li>Переменные объявленные во внешнем файле</li>
                </ol>
                Для просмотра переменных можно воспользоваться <a href="https://github.com/khmarbaise/Maven-Echo-Plugin">maven-echo-plugin</a> или
                <a href="plugins/maven-antrun-plugin.html">maven-antrun-plugin</a>.
            </p>
        </section>
        <section name="Переменные объявленные внутри pom.xml">
            <p>
                Давайте начнём с самого простого: объявим свойства и сами будем их использовать<br/>
                Свойства можно объявить так
                <source><![CDATA[
                    <properties>
                             <temp.directory>/tmp</temp.directory>
                    </properties>
                    <build>
                    <outputDirectory>${temp.directory}<outputDirectory> ]]>
                </source>

                В примере
                <source><![CDATA[
                <properties>
                    <org.springframework.version>3.0.6.RELEASE</org.springframework.version>
                </properties>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-orm</artifactId>
                    <version>${org.springframework.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-aop</artifactId>
                    <version>${org.springframework.version}</version>
                </dependency>

                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-web</artifactId>
                    <version>${org.springframework.version}</version>
                </dependency>

                <dependency>
                    <groupId>org.springframework.security</groupId>
                    <artifactId>spring-security-core</artifactId>
                    <version>${org.springframework.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.springframework.security</groupId>
                    <artifactId>spring-security-config</artifactId>
                    <version>${org.springframework.version}</version>
                </dependency>
                <dependency>
                    <groupId>org.springframework.security</groupId>
                    <artifactId>spring-security-web</artifactId>
                    <version>${org.springframework.version}</version>
                </dependency>
                ]]>
                </source>
                использование свойства  org.springframework.version позволяет избавиться от дублирования и уменьшает вероятность ошибок при апгрейде.
            </p>
        </section>
        <section name="Предопределёные переменные">
            <p>
                Предопределённые переменные можно разделить на несколько видов.
             </p>
             <p>
                <b>Встроенные свойства</b>
                <ul>
                <li>${basedir}</li> директория где лежит pom.xml
                <li>${version}</li> тоже самое что и ${project.version} или ${pom.version}
                </ul>
             </p>
             <p>
                 <b>Свойства проекта</b>
                На все свойства в pom.xml, можно сослаться с помощью  префиксов project. или pom.
                Ниже приведёт пример некоторых часто используемых элементов.
               <ul>
                   <li>${project.build.directory}</li>  "target" директория,или тоже самое
                   <li>${pom.project.build.directory} </li>
                   <li>${project.build.outputDirectory}</li> путь к директории куда компилятор складывает файлы по умолчанию  "target/classes"
                   <li>${project.name} или ${pom.name}</li> имя  проекта
                   <li>${project.version} или ${pom.version}</li> версия  проекта.
               </ul>
             </p>
             <p>
                <b>Настройки пользователя</b>
                Можно получить доступ к свойствам settings.xml с помощью префикса settings. ,например
                <ul> 
                    <li>${settings.localRepository}</li> путь к локальному репозиторию пользователя.
                </ul>
                </p>
                <p>
                <b>Переменные окружения</b>
                Для доступа к переменным окружения используйте пефикс env.
                Примеры
                <ul>
                <li>${env.M2_HOME}</li> путь к установленому maven.
                </ul>
            </p>
            <p>
                <b>Системные свойства System.properties</b>
                Доступ к системным свойствам возможен напрямую.
                 <ul>
                    <li>${java.home}</li> путь к текущей переменной окружения  JRE_HOME.
                 </ul>
            </p>
        </section>
        <section name="Переменные объявленные во внешнем файле">
            <p>
                Для того чтобы загрузить переменные из внешнего файла удобнее всего использовать
                <a href="http://mojo.codehaus.org/properties-maven-plugin/usage.html">maven-properties-plugin</a>.
            </p>
            <p>
                Давайте рассмотрим его работу.
                <source><![CDATA[
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>1.0-alpha-2</version>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files>
                                        <file>src/config/app.properties</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                ]]></source>
                В данном примере объявляется плагин, он отрабатывает на стадии  <a  href="all-phases.html">initialize</a>
                и загружает все свойства из файла src/config/app.properties.

            </p>
        </section>
    </body>
</document>