<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Модульное (Юнит) тестирование</title>
        <author>Ржевский Дмитрий</author>
    </properties>

    <head>
        <meta name="keyword" content="тестирование, testung, unit, java, maven ява, мавен, плагины, ьфмут"/>
        <title>Модульное (Юнит) тестирование</title>
    </head>


    <body>
        <section name="введение">
            <p>Тестирование является важным элементом обеспечения качества кода и встроено в жизненный цикл сборки прогаммы.
                Как вы уже заметили в структуре директорий существует две ветки исходных файлов: src/main и src/test. В  src/main лежит исходный текст самой программы, в src/test — тесты которые проверяют её функционирование. Юнит тестирование в отличии от других видов тестирования использует следующий подход:
                тестируются маленьки куски программы, изолировно. Обычно тестируется отдельный метод или класс.
                Модульное тестирование облегчает ручной рефакторинг,
                повышает качество кода
            </p>
            <p>
                Maven поддерживает 2 библиотеки для тестирования: JUnit и TestNG.
                Хоть библиотека  JUnit менее функциональна, но она проще и более распространена.
            </p>
        </section>
        <section name="Начинаем использовать JUnit">
            <p>
                За запуск юнит тестов ответсвенен maven-surefire-plugin. По умолчанию все юнит тесты которые находятся в директории
                использование IoC облегчает тестирование.

            </p>
        </section>
        <section name="Использование mock объектов.">
            В java есть много  библиотек
            easyMock
            powerMock
            Mockito
            др..

        </section>
    </body>
</document>