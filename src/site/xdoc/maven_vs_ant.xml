<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Maven vs Ant</title>
        <author>Ржевский Дмитрий</author>
    </properties>

    <head>
        <meta name="keyword" content="java, maven, ant, about, ява, мавен, ьфмут, ant, maven vs ant, сравнение"/>
        <title>Maven vs Ant</title>
    </head>


    <body>
        <section name="Интеграция со средами разработки">
            <p>
              Во-первых в отличии от Ant,  Maven хорошо интегрируется со всеми основными средами разработки.
                Если в вашей команде предпочитают работать в разных средах разработки, то не нужно ограничивать - пусть
                каждый пользуется чем ему это нравится. В любой среде проект открывается сразу уже настроенный.
            </p>
            <p>
            Во вторых хорошо если сборка проекта может происходить совсем без IDE.
                Для сборки Ant'ом то значит поддерживать скрипты для сборки которые дублируют информацию в файлах проекта конкретной IDE.
                Зачастую  build.xml (файл сборки в Ant) устаревает и перестаёт работать т.к. ими каждодневно не используются.
            </p>
        </section>
        <section name="Управление зависимостями в Ant">
        <p>
            Во всех Ant проектах в которых я учавствовал работа с библиотеками организована следующим образом:
            в директории проекта создавалась папка lib и туда копировались все jar файлы библиотек.
            Проблем нет до тех пор пока вся библиотека содержится в одном jar файле.
            Но дело в том что сложные библиотеки могут включать в свой состав другие библиотеки(зависимости).
            К примеру hibernate содержит внутри себя 16 библиотек. Вот управлять такими библиотеками с зависимостями сложнее.
           </p>
            <p>
            Представьте что в вашем проекте давно используется <a href="http://www.hibernate.org/">Hibernate</a> и <a href="http://struts.apache.org/">Struts</a>.
            Тут вы решили обновить версию Hibernate чтобы воспользоваться новыми возможностями новой версии.
            Кажется всё просто - сравниваем версии hibernate, копируем в директорию lib все библиотеки из нового hibernate.
            Если в lib есть такие же файлы библиотек со старыми номерами в названии файла то пожалуй их нужно удалить.
            Всё вроде просто, но ранние версии hibernate содержали в качестве зависимости <a href="http://commons.apache.org/logging/">commons-logging</a>,
            а в новой версии вместо него используется <a href="http://www.log4j.ru/articles/Slf4jAndCommonsLoggingPage.html">slf4j</a>.
            Получается commons-logging уже не нужен, можно удалить. А вы точно уверены что можно удалить?
            А если commons-logging успользуется в другой библиотеке? И действительно, внутри struts есть commons-logging.
            удалять нельзя - иначе получешь ClassNotFoundException во время выолнения программы.
            Тут я вам описал случай с двумя библиотеками Hibernate и Struts. А если библиотек много?
            Пожалуй тут лучше воспользоваться <a href="http://ant.apache.org/ivy/">ivy</a>..
        </p>
        </section>
        <section name="Управление зависимостями в Maven">
            <p>
                Maven хранит зависимости в pom.xml.
                И в отличии от Ant'овской системы сборки<sup><a href="#other">*</a></sup> здесь информация о зависимостях не теряется.
                В большинстве случаев апгрейд библиотеки сводится к изменению номера версии в pom.xml. Всё остальное Maven сделат сам.
            </p>
            <hr/>
            <p><a name="other"></a>Здесь приведён часто встречающийся способ сборки проекта в Ant, но он может значительно отличаться.</p>
        </section>
        <section name="Недостатки maven">
            <p>
                К недостатком maven следует отнести его большую сложность и дополнительное время для изучения если вы ещё не знаете Maven.               
            </p>
            <p>
                Есть опенсорсные библиотеки которые собираются не Maven'ом, и они попадают в <a href="repository.html"> центральный репозиторий</a> обычно позже чем выйдет официальный релиз.
                Тут можно либо подождать когда они всё-таки попадут в центральный репозиторий,  либо добавить их вручную в <a href="repository.html">локальный/корпоративный репозиторий</a>.
            </p>

        </section>
    </body>
</document>