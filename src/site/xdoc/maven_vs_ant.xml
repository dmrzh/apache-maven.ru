<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Maven vs Ant</title>
        <author>Ржевский Дмитрий</author>
    </properties>

    <head>
        <meta name="keyword" content="java, maven, ant, about, ява, мавен, ьфмут, ant, maven vs ant, сравнение"/>
        <title>Maven vs Ant</title>
    </head>


    <body>
        <section name="Интеграция со средами разработки">
            <p>
              Во-первых в отличии от Ant,  Maven хорошо интегрируется со всеми основными средами разработки.
                если в комманде предпочитают работать в разных IDE то не нужно ограничивать - пусть
                каждый пользуется как ему это нравится. В любой среде проект открывается сразу уже настроенный.
              Во вторых
                хорошо если сборка проекта может происходить совсем без IDE.
                Для сборки Ant'ом то значит поддерживать скрипты для сборки которые дублируют информацию в файлах проекта конкретной IDE.
                Зачастую  build.xml (файлы сборки в Ant) устаривают и перестают работать т.к. ими не используются каждодневно.  
            </p>
        </section>
        <section name="Управление зависимостями в Ant">
        <p>
            Во всех Ant проектах в которых я учавствовал работа с библиотеками организована следующим образом:
            в директории проекта создавалась папка lib и туда копировались все jar файлы библиотек.
            Проблем нет до тех пор пока вся библиотека содержится в одном jar файле.
            Но дело в том что сложные библиотеки могут включать в свой состав другие библиотеки(зависимости).
            К примеру hibernate содержит внутри себя 16 библиотек.
            Вот управлять таким количеством библиотек получается довольно сложно.
            Представьте что в вашем проекте давно используется hibernate и Struts.
            Вы скопировали все библиотеки в lib обнаружили что там 2 версии библиотек commons-logging.
            Одна из hibernate другая из Struts. Пожалуй нужно удалить одну из них.
            Тут вы решили обновить версию hibernete чтобы воспользоваться новыми возможностями новой версии.
            Кажется всё просто - сравниваем версии hibernate, копируем в директорию lib все библиотеки из нового hibernate.
            Если в lib есть такие же файлы библиотек со старыми номерами в названии файла то пожалуй их нужно удалить.
            Всё вроде просто, но ранние версии hibernate содержали в качестве зависимости commons-logging,
            а в новой версии вместо него используется slf4j.
            Получается commons-logging уже не нужен, можно удалить. А вы точно уверены что можно удалить?
            А если commons-logging успользуется в другой библиотеке? И действительно, внутри struts есть commons-logging.
            удалять нельзя - иначе получешь ClassNotFoundException во время выолнения программы.
            Тут я вам описал случай с двумя библиотеками Hibernate и Struts. А если библиотек много?
            Тут может спасти только ivy..
        </p>
        </section>
        <section name="Управление зависимостями в Maven">
            <p>
                Maven хранит зависимости в pom.xml.
                И в отличии от Ant'овской системы сборки здесь информация о зависимостях не теряется.
                В большинстве случаев апгрейд библиотеки сводится к изменению номера версии в зависимости. Всё остальное сделат maven сам.
            </p>
        </section>
    </body>
</document>