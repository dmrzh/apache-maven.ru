<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Файл проекта pom.xml</title>
        <author>Ржевский Дмитрий</author>
    </properties>

    <head>
        <meta name="keyword" content="java, maven, pom.xml , pom, ява, мавен, пом, фай описания прокта"/>
        <title>Файл проекта pom.xml</title>
    </head>


    <body>
        <section name="Что такое pom.xml">
            <p>
           pom.xml - это основной файл который описывает проект.
                Вообще могут быть дополнительные файлы, но они играют второстепенную роль.

        </p>
            <p>Давайте резберём из чего состоит файл pom.xml</p>
         </section>
        <section name="Корневой элемент и заголовок.">
            <p>

                <source>
            <![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                    http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  .............
</project>
  ]]>
                </source>
         Корневой элемент  <![CDATA[ <project>]]>, схема,
                которая облегчает редактирование и проверку, и версия POM.
</p>
            <p>
            Внутри тэга project содержится основная и обязательная информация о проекте:
      <source>
<![CDATA[
  <!-- The Basics -->
  <groupId>...</groupId>
  <artifactId>...</artifactId>
  <version>...</version>
]]>
   </source>

    В Maven каждый проект идентифицируется парой groupId    artifactId.
                Во избежание конфликта имён,  groupId -
    наименование организации или подразделения и обычно действуют такие же правила как и при именовании пакетов в Java - записывают доменное имя организации или сайта проекта.

                 artifactId - название проекта.   Внутри тэга version, как можно догадаться хранится версия проекта.
                Тройкой  groupId, artifactId, version (далее - GAV)  можно однозначно идентифицировать jar файл приложения или библиотеки.
                Если состояние кода для проекта не зафиксировано, то в конце к имени версии добавляется "-SNAPSHOT" что обозначает что версия в разработке и результирующий jar файл может меняться.

                &lt;packaging>...&lt;/packaging>   определяет какого типа файл будет создаваться как результат сборки. Возможные варианты pom, jar, war, ear


             </p>
            <p>Давайте лучше рассмотрим на примере проекта <a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/org/powermock/powermock-core/1.4.6/powermock-core-1.4.6.pom">powermock-core</a>
                <b>groupId</b> - org.powermock,
                <b>artifactId</b> - powermock-core ,
                <b>version</b> - 1.4.6
            </p>

            <p>
                Также добавляется информация, которая не используется самим мавеном, но нужна для программиста, чтобы понять, о чём этот проект:<br/>
                <ul>
                    <li> <![CDATA[<name>powermock-core</name> название проекта для человека]]></li>
                    <li> <![CDATA[<description>PowerMock core functionality.</description> Описание проекта]]></li>
                    <li> <![CDATA[<url>http://www.powermock.org</url>  сайт проекта.]]></li>
                  </ul>
            </p>
            </section>
        <section name="Зависимости">
            <p>

                Зависимости - следующая очень важная часть pom.xml - тут хранится список  всех библиотек
                (зависимостей) которые используюся в проекте.    Каждая библиотека идентифицируется
                также   как и сам проект - тройкой  groupId, artifactId, version (GAV).
                Объявление зависимостей заключено в тэг  <![CDATA[ <dependencies>...</dependencies>]]>.

                <source>
                    <![CDATA[
                <dependencies>
                        <dependency>
                            <groupId>junit</groupId>
                            <artifactId>junit</artifactId>
                            <version>4.4</version>
                            <scope>test</scope>
                        </dependency>
                        <dependency>
                            <groupId>org.powermock</groupId>
                            <artifactId>powermock-reflect</artifactId>
                            <version>${version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.javassist</groupId>
                            <artifactId>javassist</artifactId>
                            <version>3.13.0-GA</version>
                            <scope>compile</scope>
                        </dependency>
                    </dependencies>

                ]]>

                </source>
                <p>
                    Как вы могли заметить, кроме GAV при описании зависимости может присутствовать тэг &lt;scope>.
                    Scope задаёт для чего библиотека используется.
                    В данном примере говорится, что  библиотека с GAV  junit:junit:4.4 нужна только для выполнения тестов.
                </p>
           </p>
        </section>
           <section name="Тэг &lt;build&gt;">
            <p>
                
               Тэг &lt;build&gt; не обязательный т. к. существуют значения по умолчанию. Этот раздел содержит информацию по самой сборке: где находятся исходные файлы, где ресурсы,
                какие плагины используются. Например:


     <source>
          <![CDATA[
         <build>
         <outputDirectory>target2</outputDirectory>
          <finalName>ROOT</finalName>
         <sourceDirectory>src/java</sourceDirectory>
            <resources>
                <resource>
                    <directory>${basedir}/src/java</directory>
                    <includes>
                    <include>**/*.properties</include>
                    </includes>
                </resource>
            </resources>
                 <plugins>
                     <plugin>
                         <groupId>org.apache.maven.plugins</groupId>
                         <artifactId>maven-pmd-plugin</artifactId>
                         <version>2.4</version>
                     </plugin>
                 </plugins>
             </build>
                    ]]>
   </source>
                <p>
                    Давайте рассмотрим этот пример более подробно.
                    <ul>
                    <li>&lt;sourceDirectory></li> определяет, откуда maven будет брать файлы исходного кода. По умолчанию это src/main/java, но вы можете определить, где это вам удобно. Директория может быть только одна (без использования специальных плагинов)
                    <li>&lt;resources></li> и вложенные в неё тэги &lt;resource> определяют, одну или несколько директорий, где хранятся файлы ресурсов.
                        Ресурсы в отличии от файлов исходного кода при сборке просто копируются . Директория по умолчанию  src/main/resources

                    <li>&lt;outputDirectory> </li>определяет, в какую директорию компилятор будет сохранять результаты компиляции - *.class файлы. Значение по умолчанию -  target/classes
                    <li>&lt;finalName></li> - имя результирующего jar (war, ear..) файла с соответствующим типу расширением, который создаётся на фазе package. Значение по умолчанию — artifactId-version.
                    </ul>
                </p>
                Maven плагины позволяют задать дополнительные действия, которые будут выполняться при сборке.
                Например в приведённом примере добавлен плагин, который автоматически делает проверку кода на наличие "плохого" кода и потенциальных ошибок.
                См <a href="plugins/maven-pmd-plugin.html">ссылка</a>.
               </p>
               <p>
                   Читайте более подробнее <a href= "plugins/index.html">о плагинах</a>
            </p>
        </section>
        </body>
    </document>